---
import { getCollection } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import HeroCard from "@components/HeroCard.astro";
import Card from "@components/CommonCard.astro";
import Pagination from "@components/Pagination.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "@consts";

export async function getStaticPaths({ paginate }) {
  const allPosts = await getCollection("posts");
  allPosts.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());
  return paginate(allPosts, { pageSize: 15 });
}

interface Props {
  page: {
    data: any[];
    currentPage: number;
    lastPage: number;
    url: {
      prev: string | undefined;
      next: string | undefined;
    };
  };
}

const { page } = Astro.props;
const basePath = "/posts";

---

<BaseLayout title={SITE_TITLE} description={SITE_DESCRIPTION}>
  <div class="grid grid-cols-1">
    <div class="col-span-1 mb-4">
      {page.data.length > 0 && <HeroCard post={page.data[0]} />}
    </div>

    <div class="mb-4 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-2">
      {page.data.slice(1, 3).map((post: any) => <Card post={post} />)}
    </div>

    <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
      {page.data.slice(3).map((post: any) => <Card post={post} />)}
    </div>
  </div>

  <Pagination
    currentPage={page.currentPage}
    lastPage={page.lastPage}
    urlPrev={page.url.prev}
    urlNext={page.url.next}
    basePath={basePath}
    maxDisplayedPages={5}
  />
</BaseLayout>